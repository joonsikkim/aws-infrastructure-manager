[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aws-infrastructure-manager"
version = "0.1.0"
description = "AWS Infrastructure Management Service using MCP Server"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "AWS Infrastructure Manager Team"},
]
keywords = ["aws", "infrastructure", "mcp", "fastapi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # AWS Integration
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    
    # Data Validation and Serialization
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # HTTP Client
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    
    # Async Support
    "asyncio-mqtt>=0.16.0",
    
    # Configuration Management
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    
    # AWS Lambda Powertools
    "aws-lambda-powertools[all]>=2.30.0",
    
    # Logging and Monitoring
    "structlog>=23.2.0",
    "rich>=13.7.0",
    
    # Date and Time
    "python-dateutil>=2.8.2",
    
    # JSON Web Tokens
    "pyjwt[crypto]>=2.8.0",
    
    # Password Hashing
    "passlib[bcrypt]>=1.7.4",
    
    # UUID Generation
    "uuid>=1.30",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # For testing FastAPI
    
    # Code Quality
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    
    # Development Tools
    "ipython>=8.18.0",
    "jupyter>=1.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/your-org/aws-infrastructure-manager"
Documentation = "https://your-org.github.io/aws-infrastructure-manager"
Repository = "https://github.com/your-org/aws-infrastructure-manager"
Issues = "https://github.com/your-org/aws-infrastructure-manager/issues"

[project.scripts]
aws-infra-manager = "src.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "tests", "config"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
]
ignore_missing_imports = true